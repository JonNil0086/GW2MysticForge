package guis;

import data.TextLoader;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import mysticForgeProfiter.MysticForgeProfiter;
import mysticForgeProfiter.MysticForgeProfiter.ItemType;
import mysticForgeProfiter.Suggestion;
import responses.tradingpost.CommerceListingsResponse;
import responses.tradingpost.CommercePricesResponse;
import utils.CopperToGSC;

/* MysticForgeProfiterPanel
 * -----------------------------------------------------------------------------
 * The panel that displays all the data.
 * -----------------------------------------------------------------------------
 * Notes:       None
 * -----------------------------------------------------------------------------
 * TODO:        - Add sorting to columns onClick
 *              - Refactor code
 * -----------------------------------------------------------------------------
 * Author:      Jonas Nilsson
 * Date:        22-04-01
 * Version:     1.0
 */
public class MysticForgeProfiterPanel extends javax.swing.JPanel {

    private final MysticForgeProfiter mysticForgeProfiter;
    private Thread threadHandle;
    
    /* MysticForgeProfiterPanel
     * --------------------------------------------------
     * Constructor used for initialization.
     * --------------------------------------------------
     * Input:   None
     * Output:  None
     * --------------------------------------------------
     */
    public MysticForgeProfiterPanel() {
        mysticForgeProfiter = new MysticForgeProfiter(new TextLoader());
        initComponents();
        formatJTables();
    }

    /**
     * Used to paint a gradient
     */
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        int w = getWidth();
        int h = getHeight();
        Color color1 = Color.ORANGE;
        Color color2 = Color.DARK_GRAY;
        GradientPaint gp = new GradientPaint(0, 0, color1, 0, h, color2);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, w, h);
    }

    /* formatJTables
     * --------------------------------------------------
     * Handles all formating necessary for jTables that is not possible to do
     * with the netBeans GUI designer.
     * --------------------------------------------------
     * Input:   None
     * Output:  None
     * --------------------------------------------------
     */
    private void formatJTables() {
        //Center rendering of the jTables
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        jTableItemInformation.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        jTableItemInformation.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        jTableItemInformation.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        jTableItemInformation.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        
        jTableSpecificCurrentBuyers.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        jTableSpecificCurrentBuyers.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        jTableSpecificCurrentBuyers.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        
        jTableSpecificCurrentSellers.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        jTableSpecificCurrentSellers.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        jTableSpecificCurrentSellers.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );

        jTableSuggestedActions.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        jTableSuggestedActions.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jTabbedPaneMenu = new javax.swing.JTabbedPane();
        jPanelSigils = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jComboBoxItemToScan = new javax.swing.JComboBox<>();
        jButtonScanMarketPlace = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabelMajorSigilSellForMax = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableItemInformation = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableSpecificCurrentBuyers = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableSpecificCurrentSellers = new javax.swing.JTable();
        jLabelCurrentBuyers = new javax.swing.JLabel();
        jLabelCurrentSellers = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableSuggestedActions = new javax.swing.JTable();

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Estimations"));

        jComboBoxItemToScan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Major Sigils", "Major Runes" }));

        jButtonScanMarketPlace.setText("Scan");
        jButtonScanMarketPlace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonScanMarketPlaceActionPerformed(evt);
            }
        });

        jLabelMajorSigilSellForMax.setText("Estimated value (sell for maximum value):");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBoxItemToScan, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonScanMarketPlace)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(8, 8, 8))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelMajorSigilSellForMax)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxItemToScan)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonScanMarketPlace, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelMajorSigilSellForMax)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Item Information"));

        jTableItemInformation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Min Buyout", "Buyout Profit", "Max Buyorder", "Buyorder Profit"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableItemInformation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableItemInformationMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableItemInformation);
        if (jTableItemInformation.getColumnModel().getColumnCount() > 0) {
            jTableItemInformation.getColumnModel().getColumn(0).setPreferredWidth(160);
            jTableItemInformation.getColumnModel().getColumn(1).setResizable(false);
            jTableItemInformation.getColumnModel().getColumn(2).setResizable(false);
            jTableItemInformation.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 726, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Specific Item Information"));

        jTableSpecificCurrentBuyers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ordered", "Price Per Unit", "Listings"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableSpecificCurrentBuyers);

        jTableSpecificCurrentSellers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Available", "Price Per Unit", "Listings"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTableSpecificCurrentSellers);

        jLabelCurrentBuyers.setText("Current Buyers");

        jLabelCurrentSellers.setText("Current Sellers");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelCurrentBuyers, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelCurrentSellers, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCurrentBuyers)
                    .addComponent(jLabelCurrentSellers))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanelSigilsLayout = new javax.swing.GroupLayout(jPanelSigils);
        jPanelSigils.setLayout(jPanelSigilsLayout);
        jPanelSigilsLayout.setHorizontalGroup(
            jPanelSigilsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSigilsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSigilsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelSigilsLayout.setVerticalGroup(
            jPanelSigilsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSigilsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPaneMenu.addTab("Sigils / Runes", jPanelSigils);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Suggested Actions On Prospect"));

        jTableSuggestedActions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Action", "Percent Profit Per 1000 Major Sigils"
            }
        ));
        jScrollPane5.setViewportView(jTableSuggestedActions);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 726, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(135, Short.MAX_VALUE))
        );

        jTabbedPaneMenu.addTab("Profit Calculations", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPaneMenu)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPaneMenu)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /* jButtonScanMarketPlaceActionPerformed
     * --------------------------------------------------
     * When the user presses the scan button, this is
     * called and performs the API scan.
     * --------------------------------------------------
     * Input:   (evt): The event
     * Output:  None
     * --------------------------------------------------
     */
    private void jButtonScanMarketPlaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonScanMarketPlaceActionPerformed
        if (threadHandle != null && threadHandle.isAlive()) {
            return;
        }
        String itemToScan = (String)jComboBoxItemToScan.getSelectedItem();
        if(itemToScan.equals("Major Sigils")) {
            // Scan sigils and perform expected value calculations
            threadHandle = new Thread(() -> { ScanForSigils(); });
        } else if(itemToScan.equals("Major Runes")) {
            // Scan runes and perform expected value calculations
            threadHandle = new Thread(() -> { ScanForRunes(); });
        }
        threadHandle.start();
    }//GEN-LAST:event_jButtonScanMarketPlaceActionPerformed
    
    /* ScanForSigils
     * --------------------------------------------------
     * Scan for sigils in the API
     * --------------------------------------------------
     * Input:   None
     * Output:  None
     * --------------------------------------------------
     */
    private void ScanForSigils() {
        mysticForgeProfiter.scanSigils();
        int maximumSigilValue = mysticForgeProfiter.calculateExpectedMaximumSigilValue();
        // TODO: Display major sigil data
        List<CommercePricesResponse> majorSigilsPricings = mysticForgeProfiter.getMajorSigilsPricings();
        List<CommerceListingsResponse> majorSigilsListings = mysticForgeProfiter.getMajorSigilsListings();
        jLabelMajorSigilSellForMax.setText(
            "Estimated value (sell for maximum value): "
            + CopperToGSC.CopperToGSC(maximumSigilValue));

        // Fill the Item information table
        DefaultTableModel itemInformationModel = (DefaultTableModel) jTableItemInformation.getModel();
        itemInformationModel.setRowCount(0);
        for(int i = 0; i < majorSigilsListings.size(); i++) {
            String itemName = mysticForgeProfiter.lookupISigilD(majorSigilsListings.get(i).getId());
            String minimumBuyout = CopperToGSC.CopperToGSC(majorSigilsListings.get(i).getSells().get(0).getUnit_price());
            String buyoutProfit = CopperToGSC.CopperToGSC(Integer.toString(maximumSigilValue - Integer.parseInt(majorSigilsListings.get(i).getSells().get(0).getUnit_price())));
            String largestBuyOrder = CopperToGSC.CopperToGSC(majorSigilsListings.get(i).getBuys().get(0).getUnit_price());
            String buyOrderProfit = CopperToGSC.CopperToGSC(Integer.toString(maximumSigilValue - Integer.parseInt(majorSigilsListings.get(i).getBuys().get(0).getUnit_price())));
            itemInformationModel.addRow(new Object[] {
                itemName,
                minimumBuyout,
                buyoutProfit,
                largestBuyOrder,
                buyOrderProfit
            });
        }
        //Fill in suggestions
        updateSuggestions(maximumSigilValue);
    }
    
    /* ScanForRunes
     * --------------------------------------------------
     * Scan for runes in the API
     * --------------------------------------------------
     * Input:   None
     * Output:  None
     * --------------------------------------------------
     */
    private void ScanForRunes(){
        // Scan runes and perform expected value calculations
        mysticForgeProfiter.scanRunes();
        int maximumRuneValue = mysticForgeProfiter.calculateExpectedMaximumRuneValue();
        // TODO: Display major rune data
        List<CommercePricesResponse> majorRunesPricings = mysticForgeProfiter.getMajorRunesPricings();
        List<CommerceListingsResponse> majorRunesListings = mysticForgeProfiter.getMajorRunesListings();
        jLabelMajorSigilSellForMax.setText(
            "Estimated value (sell for maximum value): "
            + CopperToGSC.CopperToGSC(maximumRuneValue));
        // Fill the Item information table
        DefaultTableModel itemInformationModel = (DefaultTableModel) jTableItemInformation.getModel();
        itemInformationModel.setRowCount(0);
        for(int i = 0; i < majorRunesListings.size(); i++) {
            String itemName = mysticForgeProfiter.lookupRuneID(majorRunesListings.get(i).getId());
            String minimumBuyout = CopperToGSC.CopperToGSC(majorRunesListings.get(i).getSells().get(0).getUnit_price());
            String buyoutProfit = CopperToGSC.CopperToGSC(Integer.toString(maximumRuneValue - Integer.parseInt(majorRunesListings.get(i).getSells().get(0).getUnit_price())));
            String largestBuyOrder = CopperToGSC.CopperToGSC(majorRunesListings.get(i).getBuys().get(0).getUnit_price());
            String buyOrderProfit = CopperToGSC.CopperToGSC(Integer.toString(maximumRuneValue - Integer.parseInt(majorRunesListings.get(i).getBuys().get(0).getUnit_price())));
            itemInformationModel.addRow(new Object[] {
                itemName,
                minimumBuyout,
                buyoutProfit,
                largestBuyOrder,
                buyOrderProfit
            });
        }
        //Fill in suggestions
        updateSuggestions(maximumRuneValue);
    }

    /* updateSuggestions
     * --------------------------------------------------
     * Used for updating suggestions.
     * --------------------------------------------------
     * Input:   (maxItemValue): The max value of the
     *              item.
     * Output:  None
     * --------------------------------------------------
     */
    private void updateSuggestions(int maxItemValue){
        //Fill in suggestions
        ArrayList<Suggestion> suggestions = mysticForgeProfiter.getSuggestions();
        DefaultTableModel suggestionsJTableModel = (DefaultTableModel) jTableSuggestedActions.getModel();
        suggestionsJTableModel.setRowCount(0);
        for(int i = 0; i < suggestions.size(); i++) {
            suggestionsJTableModel.addRow(new Object[] {
                suggestions.get(i).getSuggestedName(),
                suggestions.get(i).getSuggestedActions(),
                CopperToGSC.averageProfitPercent(suggestions.get(i).getSuggestedProfit(), maxItemValue)+"%"
            });
        }
    }
    
    /* jTableItemInformationMouseClicked
     * --------------------------------------------------
     * Used for updating tables with relevant information
     * when a row is clicked on.
     * --------------------------------------------------
     * Input:   (evt): The event
     * Output:  None
     * --------------------------------------------------
     */
    private void jTableItemInformationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableItemInformationMouseClicked
        // Find out where the click occured
        int row = jTableItemInformation.rowAtPoint(evt.getPoint());
        int col = jTableItemInformation.columnAtPoint(evt.getPoint());
        if (row < 0 || col < 0) {
            // Early exit, no msg required
            return;
        }
        // Find the marked ID
        String itemName = (String)jTableItemInformation.getValueAt(row, 0);
        String markedID;
        List<CommerceListingsResponse> listings;
        if (itemName.contains("Sigil")) {
            markedID = mysticForgeProfiter.lookupName(itemName, ItemType.SIGIL);
            listings = mysticForgeProfiter.getMajorSigilsListings();
        } else if (itemName.contains("Rune")){
            markedID = mysticForgeProfiter.lookupName(itemName, ItemType.RUNE);
            listings = mysticForgeProfiter.getMajorRunesListings();
        } else {
            System.out.println("Warning: Unknown type in table entry.");
            return;
        }
        CommerceListingsResponse showThis = null;
        for(int i = 0; i < listings.size(); i++) {
            if(listings.get(i).getId().equals(markedID)) {
                showThis = listings.get(i);
                break;
            } 
        }
        if (showThis == null) {
            System.out.println("Warning: No response was found with matching ID");
            return;
        }
        // Display them at the correct tables
        DefaultTableModel specificBuys 
                = (DefaultTableModel) jTableSpecificCurrentBuyers.getModel();
        specificBuys.setRowCount(0);
        DefaultTableModel specificSells 
                = (DefaultTableModel) jTableSpecificCurrentSellers.getModel();
        specificSells.setRowCount(0);
        for(int i = 0; i < showThis.getBuys().size(); i++) {
            specificBuys.addRow(new Object[] {
                showThis.getBuys().get(i).getQuantity(),
                CopperToGSC.CopperToGSC(showThis.getBuys().get(i).getUnit_price()),
                showThis.getBuys().get(i).getListings()
            });  
        }
        for(int i = 0; i < showThis.getSells().size(); i++) {
            specificSells.addRow(new Object[] {
                showThis.getSells().get(i).getQuantity(),
                CopperToGSC.CopperToGSC(showThis.getSells().get(i).getUnit_price()),
                showThis.getSells().get(i).getListings()
            });  
        }  
    }//GEN-LAST:event_jTableItemInformationMouseClicked
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonScanMarketPlace;
    private javax.swing.JComboBox<String> jComboBoxItemToScan;
    private javax.swing.JLabel jLabelCurrentBuyers;
    private javax.swing.JLabel jLabelCurrentSellers;
    private javax.swing.JLabel jLabelMajorSigilSellForMax;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanelSigils;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPaneMenu;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTableItemInformation;
    private javax.swing.JTable jTableSpecificCurrentBuyers;
    private javax.swing.JTable jTableSpecificCurrentSellers;
    private javax.swing.JTable jTableSuggestedActions;
    // End of variables declaration//GEN-END:variables
}
